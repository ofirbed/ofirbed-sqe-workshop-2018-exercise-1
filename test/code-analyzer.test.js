import assert from 'assert';
import {parseCode,CreateFunctionDataObject,getElementbyNumber,analyze,startaAnalyze,CreateVarDecDataObject} from '../src/js/code-analyzer';

describe('Create Data Objects Tests', () => {

    it('Create Function', () => {
        assert.equal(
            CreateFunctionDataObject({
                type: 'FunctionDeclaration',
                id: {name: 'func1'},
                loc: {start: {line: 1}}
            }).toString(),
            {type: 'FunctionDeclaration', line: 1, name: 'func1'}.toString()
        );});

    it('Create Variable Decleration ', () => {
        assert.equal(
            CreateVarDecDataObject({
                type: 'VariableDeclarator',
                id: {loc: {start: {line: 1}},name: 'str'}
            }).toString(),
            {type: 'VariableDeclarator', line: 1, name: 'func1'}.toString()
        );});});

describe('Get Element Tests', () => {

    it('get line element', () => {
        assert.equal(getElementbyNumber({type: 'test1', name: 'test2', line: 1, value: 'test3', condition: 'test4'}, 1),'1'
        );});

    it('get type element', () => {
        assert.equal(getElementbyNumber({type: 'test1',name: 'test2',line: 1,value: 'test3',condition: 'test4'}, 2).toString(),'test1'
        );});

    it('get name element', () => {
        assert.equal(getElementbyNumber({type: 'test1',name: 'test2',line: 1,value: 'test3',condition: 'test4'}, 3).toString(),'test2'
        );});
    it('get condition element', () => {
        assert.equal(getElementbyNumber({type: 'test1',name: 'test2',line: 1,value: 'test3',condition: 'test4' }, 4).toString(),'test4'
        );});

    it('get value element', () => {
        assert.equal(getElementbyNumber({type: 'test1',name: 'test2',line: 1,value: 'test3', condition: 'test4'}, 5).toString(),'test3'
        ); }); });

describe('Analyze Tests', () => {

    it('Analyze Function 1', () => {
        assert.equal(
            JSON.stringify(analyze({
                type: 'FunctionDeclaration', id: {name: 'func1'}, params: [{name: 'a'}], loc: {start: {line: 1}},
                body: {type: 'BlockStatement', body: []}
            })),
            JSON.stringify([{line: 1, type: 'FunctionDeclaration', name: 'func1'}, {
                line: 1,
                type: 'VariableDeclaration',
                name: 'a'
            }])
        );
    });
});




describe('Full Coverage Analyze Tests', () => {

    it('Analyze Function 2', () => {
        var inputCode='function func2 (){\n' + '    let x;\n' + '    x=0;\n' + '    for(var i=0;i<3;i++){\n' + '        x=x+1;\n' + '    }\n' + '    while (x<10){\n' + '        x=x+1;\n' + '    }\n' + '    if (x<20){\n' + '        x=x+1;\n' + '    }\n' + '\n' + '    if(x<1){\n' + '        x=x;\n' + '    }\n' + '    else if (x<20){\n' + '        x=x+1;\n' + '        }\n' + '    else \n' + '        if(x=100){\n' + '        x=x\n' + '        }\n' + '        else{\n' + '        x=x;\n' + '        }\n' + '      \n' + '    \n' + '\n' + '    if(x<0){\n' + '        x=x;}\n' + '    else{x=x;\n' + '    }\n' + '    return x;\n' + '}\n';
        assert.equal(
            JSON.stringify(startaAnalyze({ 'type': 'FunctionDeclaration', 'id': { 'type': 'Identifier', 'name': 'func2', 'range': [ 9, 14 ], 'loc': { 'start': { 'line': 1, 'column': 9 }, 'end': { 'line': 1, 'column': 14 } } }, 'params': [], 'body': { 'type': 'BlockStatement', 'body': [ { 'type': 'VariableDeclaration', 'declarations': [ { 'type': 'VariableDeclarator', 'id': { 'type': 'Identifier', 'name': 'x', 'range': [ 27, 28 ], 'loc': { 'start': { 'line': 2, 'column': 8 }, 'end': { 'line': 2, 'column': 9 } } }, 'init': null, 'range': [ 27, 28 ], 'loc': { 'start': { 'line': 2, 'column': 8 }, 'end': { 'line': 2, 'column': 9 } } } ], 'kind': 'let', 'range': [ 23, 29 ], 'loc': { 'start': { 'line': 2, 'column': 4 }, 'end': { 'line': 2, 'column': 10 } } }, { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 34, 35 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 5 } } }, 'right': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 36, 37 ], 'loc': { 'start': { 'line': 3, 'column': 6 }, 'end': { 'line': 3, 'column': 7 } } }, 'range': [ 34, 37 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 7 } } }, 'range': [ 34, 38 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 8 } } }, { 'type': 'ForStatement', 'init': { 'type': 'VariableDeclaration', 'declarations': [ { 'type': 'VariableDeclarator', 'id': { 'type': 'Identifier', 'name': 'i', 'range': [ 51, 52 ], 'loc': { 'start': { 'line': 4, 'column': 12 }, 'end': { 'line': 4, 'column': 13 } } }, 'init': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 53, 54 ], 'loc': { 'start': { 'line': 4, 'column': 14 }, 'end': { 'line': 4, 'column': 15 } } }, 'range': [ 51, 54 ], 'loc': { 'start': { 'line': 4, 'column': 12 }, 'end': { 'line': 4, 'column': 15 } } } ], 'kind': 'var', 'range': [ 47, 54 ], 'loc': { 'start': { 'line': 4, 'column': 8 }, 'end': { 'line': 4, 'column': 15 } } }, 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'i', 'range': [ 55, 56 ], 'loc': { 'start': { 'line': 4, 'column': 16 }, 'end': { 'line': 4, 'column': 17 } } }, 'right': { 'type': 'Literal', 'value': 3, 'raw': '3', 'range': [ 57, 58 ], 'loc': { 'start': { 'line': 4, 'column': 18 }, 'end': { 'line': 4, 'column': 19 } } }, 'range': [ 55, 58 ], 'loc': { 'start': { 'line': 4, 'column': 16 }, 'end': { 'line': 4, 'column': 19 } } }, 'update': { 'type': 'UpdateExpression', 'operator': '++', 'argument': { 'type': 'Identifier', 'name': 'i', 'range': [ 59, 60 ], 'loc': { 'start': { 'line': 4, 'column': 20 }, 'end': { 'line': 4, 'column': 21 } } }, 'prefix': false, 'range': [ 59, 62 ], 'loc': { 'start': { 'line': 4, 'column': 20 }, 'end': { 'line': 4, 'column': 23 } } }, 'body': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 73, 74 ], 'loc': { 'start': { 'line': 5, 'column': 8 }, 'end': { 'line': 5, 'column': 9 } } }, 'right': { 'type': 'BinaryExpression', 'operator': '+', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 75, 76 ], 'loc': { 'start': { 'line': 5, 'column': 10 }, 'end': { 'line': 5, 'column': 11 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 77, 78 ], 'loc': { 'start': { 'line': 5, 'column': 12 }, 'end': { 'line': 5, 'column': 13 } } }, 'range': [ 75, 78 ], 'loc': { 'start': { 'line': 5, 'column': 10 }, 'end': { 'line': 5, 'column': 13 } } }, 'range': [ 73, 78 ], 'loc': { 'start': { 'line': 5, 'column': 8 }, 'end': { 'line': 5, 'column': 13 } } }, 'range': [ 73, 79 ], 'loc': { 'start': { 'line': 5, 'column': 8 }, 'end': { 'line': 5, 'column': 14 } } } ], 'range': [ 63, 85 ], 'loc': { 'start': { 'line': 4, 'column': 24 }, 'end': { 'line': 6, 'column': 5 } } }, 'range': [ 43, 85 ], 'loc': { 'start': { 'line': 4, 'column': 4 }, 'end': { 'line': 6, 'column': 5 } } }, { 'type': 'WhileStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 97, 98 ], 'loc': { 'start': { 'line': 7, 'column': 11 }, 'end': { 'line': 7, 'column': 12 } } }, 'right': { 'type': 'Literal', 'value': 10, 'raw': '10', 'range': [ 99, 101 ], 'loc': { 'start': { 'line': 7, 'column': 13 }, 'end': { 'line': 7, 'column': 15 } } }, 'range': [ 97, 101 ], 'loc': { 'start': { 'line': 7, 'column': 11 }, 'end': { 'line': 7, 'column': 15 } } }, 'body': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 112, 113 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 9 } } }, 'right': { 'type': 'BinaryExpression', 'operator': '+', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 114, 115 ], 'loc': { 'start': { 'line': 8, 'column': 10 }, 'end': { 'line': 8, 'column': 11 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 116, 117 ], 'loc': { 'start': { 'line': 8, 'column': 12 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 114, 117 ], 'loc': { 'start': { 'line': 8, 'column': 10 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 112, 117 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 112, 118 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 14 } } } ], 'range': [ 102, 124 ], 'loc': { 'start': { 'line': 7, 'column': 16 }, 'end': { 'line': 9, 'column': 5 } } }, 'range': [ 90, 124 ], 'loc': { 'start': { 'line': 7, 'column': 4 }, 'end': { 'line': 9, 'column': 5 } } }, { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 133, 134 ], 'loc': { 'start': { 'line': 10, 'column': 8 }, 'end': { 'line': 10, 'column': 9 } } }, 'right': { 'type': 'Literal', 'value': 20, 'raw': '20', 'range': [ 135, 137 ], 'loc': { 'start': { 'line': 10, 'column': 10 }, 'end': { 'line': 10, 'column': 12 } } }, 'range': [ 133, 137 ], 'loc': { 'start': { 'line': 10, 'column': 8 }, 'end': { 'line': 10, 'column': 12 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 148, 149 ], 'loc': { 'start': { 'line': 11, 'column': 8 }, 'end': { 'line': 11, 'column': 9 } } }, 'right': { 'type': 'BinaryExpression', 'operator': '+', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 150, 151 ], 'loc': { 'start': { 'line': 11, 'column': 10 }, 'end': { 'line': 11, 'column': 11 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 152, 153 ], 'loc': { 'start': { 'line': 11, 'column': 12 }, 'end': { 'line': 11, 'column': 13 } } }, 'range': [ 150, 153 ], 'loc': { 'start': { 'line': 11, 'column': 10 }, 'end': { 'line': 11, 'column': 13 } } }, 'range': [ 148, 153 ], 'loc': { 'start': { 'line': 11, 'column': 8 }, 'end': { 'line': 11, 'column': 13 } } }, 'range': [ 148, 154 ], 'loc': { 'start': { 'line': 11, 'column': 8 }, 'end': { 'line': 11, 'column': 14 } } } ], 'range': [ 138, 160 ], 'loc': { 'start': { 'line': 10, 'column': 13 }, 'end': { 'line': 12, 'column': 5 } } }, 'alternate': null, 'range': [ 129, 160 ], 'loc': { 'start': { 'line': 10, 'column': 4 }, 'end': { 'line': 12, 'column': 5 } } }, { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 169, 170 ], 'loc': { 'start': { 'line': 14, 'column': 7 }, 'end': { 'line': 14, 'column': 8 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 171, 172 ], 'loc': { 'start': { 'line': 14, 'column': 9 }, 'end': { 'line': 14, 'column': 10 } } }, 'range': [ 169, 172 ], 'loc': { 'start': { 'line': 14, 'column': 7 }, 'end': { 'line': 14, 'column': 10 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 183, 184 ], 'loc': { 'start': { 'line': 15, 'column': 8 }, 'end': { 'line': 15, 'column': 9 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 185, 186 ], 'loc': { 'start': { 'line': 15, 'column': 10 }, 'end': { 'line': 15, 'column': 11 } } }, 'range': [ 183, 186 ], 'loc': { 'start': { 'line': 15, 'column': 8 }, 'end': { 'line': 15, 'column': 11 } } }, 'range': [ 183, 187 ], 'loc': { 'start': { 'line': 15, 'column': 8 }, 'end': { 'line': 15, 'column': 12 } } } ], 'range': [ 173, 193 ], 'loc': { 'start': { 'line': 14, 'column': 11 }, 'end': { 'line': 16, 'column': 5 } } }, 'alternate': { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 207, 208 ], 'loc': { 'start': { 'line': 17, 'column': 13 }, 'end': { 'line': 17, 'column': 14 } } }, 'right': { 'type': 'Literal', 'value': 20, 'raw': '20', 'range': [ 209, 211 ], 'loc': { 'start': { 'line': 17, 'column': 15 }, 'end': { 'line': 17, 'column': 17 } } }, 'range': [ 207, 211 ], 'loc': { 'start': { 'line': 17, 'column': 13 }, 'end': { 'line': 17, 'column': 17 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 222, 223 ], 'loc': { 'start': { 'line': 18, 'column': 8 }, 'end': { 'line': 18, 'column': 9 } } }, 'right': { 'type': 'BinaryExpression', 'operator': '+', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 224, 225 ], 'loc': { 'start': { 'line': 18, 'column': 10 }, 'end': { 'line': 18, 'column': 11 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 226, 227 ], 'loc': { 'start': { 'line': 18, 'column': 12 }, 'end': { 'line': 18, 'column': 13 } } }, 'range': [ 224, 227 ], 'loc': { 'start': { 'line': 18, 'column': 10 }, 'end': { 'line': 18, 'column': 13 } } }, 'range': [ 222, 227 ], 'loc': { 'start': { 'line': 18, 'column': 8 }, 'end': { 'line': 18, 'column': 13 } } }, 'range': [ 222, 228 ], 'loc': { 'start': { 'line': 18, 'column': 8 }, 'end': { 'line': 18, 'column': 14 } } } ], 'range': [ 212, 238 ], 'loc': { 'start': { 'line': 17, 'column': 18 }, 'end': { 'line': 19, 'column': 9 } } }, 'alternate': { 'type': 'IfStatement', 'test': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 260, 261 ], 'loc': { 'start': { 'line': 21, 'column': 11 }, 'end': { 'line': 21, 'column': 12 } } }, 'right': { 'type': 'Literal', 'value': 100, 'raw': '100', 'range': [ 262, 265 ], 'loc': { 'start': { 'line': 21, 'column': 13 }, 'end': { 'line': 21, 'column': 16 } } }, 'range': [ 260, 265 ], 'loc': { 'start': { 'line': 21, 'column': 11 }, 'end': { 'line': 21, 'column': 16 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 276, 277 ], 'loc': { 'start': { 'line': 22, 'column': 8 }, 'end': { 'line': 22, 'column': 9 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 278, 279 ], 'loc': { 'start': { 'line': 22, 'column': 10 }, 'end': { 'line': 22, 'column': 11 } } }, 'range': [ 276, 279 ], 'loc': { 'start': { 'line': 22, 'column': 8 }, 'end': { 'line': 22, 'column': 11 } } }, 'range': [ 276, 279 ], 'loc': { 'start': { 'line': 22, 'column': 8 }, 'end': { 'line': 22, 'column': 11 } } } ], 'range': [ 266, 289 ], 'loc': { 'start': { 'line': 21, 'column': 17 }, 'end': { 'line': 23, 'column': 9 } } }, 'alternate': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 312, 313 ], 'loc': { 'start': { 'line': 25, 'column': 8 }, 'end': { 'line': 25, 'column': 9 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 314, 315 ], 'loc': { 'start': { 'line': 25, 'column': 10 }, 'end': { 'line': 25, 'column': 11 } } }, 'range': [ 312, 315 ], 'loc': { 'start': { 'line': 25, 'column': 8 }, 'end': { 'line': 25, 'column': 11 } } }, 'range': [ 312, 316 ], 'loc': { 'start': { 'line': 25, 'column': 8 }, 'end': { 'line': 25, 'column': 12 } } } ], 'range': [ 302, 326 ], 'loc': { 'start': { 'line': 24, 'column': 12 }, 'end': { 'line': 26, 'column': 9 } } }, 'range': [ 257, 326 ], 'loc': { 'start': { 'line': 21, 'column': 8 }, 'end': { 'line': 26, 'column': 9 } } }, 'range': [ 203, 326 ], 'loc': { 'start': { 'line': 17, 'column': 9 }, 'end': { 'line': 26, 'column': 9 } } }, 'range': [ 166, 326 ], 'loc': { 'start': { 'line': 14, 'column': 4 }, 'end': { 'line': 26, 'column': 9 } } }, { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 347, 348 ], 'loc': { 'start': { 'line': 30, 'column': 7 }, 'end': { 'line': 30, 'column': 8 } } }, 'right': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 349, 350 ], 'loc': { 'start': { 'line': 30, 'column': 9 }, 'end': { 'line': 30, 'column': 10 } } }, 'range': [ 347, 350 ], 'loc': { 'start': { 'line': 30, 'column': 7 }, 'end': { 'line': 30, 'column': 10 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 361, 362 ], 'loc': { 'start': { 'line': 31, 'column': 8 }, 'end': { 'line': 31, 'column': 9 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 363, 364 ], 'loc': { 'start': { 'line': 31, 'column': 10 }, 'end': { 'line': 31, 'column': 11 } } }, 'range': [ 361, 364 ], 'loc': { 'start': { 'line': 31, 'column': 8 }, 'end': { 'line': 31, 'column': 11 } } }, 'range': [ 361, 365 ], 'loc': { 'start': { 'line': 31, 'column': 8 }, 'end': { 'line': 31, 'column': 12 } } } ], 'range': [ 351, 366 ], 'loc': { 'start': { 'line': 30, 'column': 11 }, 'end': { 'line': 31, 'column': 13 } } }, 'alternate': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 376, 377 ], 'loc': { 'start': { 'line': 32, 'column': 9 }, 'end': { 'line': 32, 'column': 10 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 378, 379 ], 'loc': { 'start': { 'line': 32, 'column': 11 }, 'end': { 'line': 32, 'column': 12 } } }, 'range': [ 376, 379 ], 'loc': { 'start': { 'line': 32, 'column': 9 }, 'end': { 'line': 32, 'column': 12 } } }, 'range': [ 376, 380 ], 'loc': { 'start': { 'line': 32, 'column': 9 }, 'end': { 'line': 32, 'column': 13 } } } ], 'range': [ 375, 386 ], 'loc': { 'start': { 'line': 32, 'column': 8 }, 'end': { 'line': 33, 'column': 5 } } }, 'range': [ 344, 386 ], 'loc': { 'start': { 'line': 30, 'column': 4 }, 'end': { 'line': 33, 'column': 5 } } }, { 'type': 'ReturnStatement', 'argument': { 'type': 'Identifier', 'name': 'x', 'range': [ 398, 399 ], 'loc': { 'start': { 'line': 34, 'column': 11 }, 'end': { 'line': 34, 'column': 12 } } }, 'range': [ 391, 400 ], 'loc': { 'start': { 'line': 34, 'column': 4 }, 'end': { 'line': 34, 'column': 13 } } } ], 'range': [ 17, 402 ], 'loc': { 'start': { 'line': 1, 'column': 17 }, 'end': { 'line': 35, 'column': 1 } } }, 'generator': false, 'expression': false, 'async': false, 'range': [ 0, 402 ], 'loc': { 'start': { 'line': 1, 'column': 0 }, 'end': { 'line': 35, 'column': 1 } } }
                ,inputCode)),

            JSON.stringify([{line: 1,type: 'FunctionDeclaration', name: 'func2'},
                {line: 2,type: 'VariableDeclarator',name: 'x'}, {line: 3,type: 'AssignmentExpression',name: 'x',value: '0'}, {line: 4,type: 'ForStatement',condition: 'var i=0;i<3;i++'}, {line: 5,type: 'AssignmentExpression',name: 'x',value: 'x+1'}, {line: 7,type: 'WhileStatement',condition: 'x<10'}, {line: 8,type: 'AssignmentExpression',name: 'x',value: 'x+1'}, {line: 10,type: 'IfStatement',condition: 'x<20'}, {line: 11,type: 'AssignmentExpression',name: 'x',value: 'x+1'}, {line: 14,type: 'IfStatement',condition: 'x<1'}, {line: 15,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 17,type: 'Else If Statement',condition: 'x<20'}, {line: 18,type: 'AssignmentExpression',name: 'x',value: 'x+1'}, {line: 21,type: 'Else If Statement',condition: 'x=100'}, {line: 22,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 25,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 30,type: 'IfStatement',condition: 'x<0'}, {line: 31,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 32,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 34,type: 'ReturnStatement',value: 'x'}
            ])
        );
    });


});


describe('Analyze Tests 2', () => {

    it('Else If test 1', () => {var inputCode='function func3 (){\n' +
            '    let x;\n' +
            '    x=0;\n' +
            '   \n' +
            '    if(x<0){\n' +
            '        x=x;}\n' +
            '    else if (x<0){\n' +
            '        x=x+1;\n' +
            '    }\n' +
            '    return x;\n' +
            '}\n';
    assert.equal(
        JSON.stringify(startaAnalyze( { 'type': 'FunctionDeclaration', 'id': { 'type': 'Identifier', 'name': 'func3', 'range': [ 9, 14 ], 'loc': { 'start': { 'line': 1, 'column': 9 }, 'end': { 'line': 1, 'column': 14 } } }, 'params': [], 'body': { 'type': 'BlockStatement', 'body': [ { 'type': 'VariableDeclaration', 'declarations': [ { 'type': 'VariableDeclarator', 'id': { 'type': 'Identifier', 'name': 'x', 'range': [ 27, 28 ], 'loc': { 'start': { 'line': 2, 'column': 8 }, 'end': { 'line': 2, 'column': 9 } } }, 'init': null, 'range': [ 27, 28 ], 'loc': { 'start': { 'line': 2, 'column': 8 }, 'end': { 'line': 2, 'column': 9 } } } ], 'kind': 'let', 'range': [ 23, 29 ], 'loc': { 'start': { 'line': 2, 'column': 4 }, 'end': { 'line': 2, 'column': 10 } } }, { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 34, 35 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 5 } } }, 'right': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 36, 37 ], 'loc': { 'start': { 'line': 3, 'column': 6 }, 'end': { 'line': 3, 'column': 7 } } }, 'range': [ 34, 37 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 7 } } }, 'range': [ 34, 38 ], 'loc': { 'start': { 'line': 3, 'column': 4 }, 'end': { 'line': 3, 'column': 8 } } }, { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 50, 51 ], 'loc': { 'start': { 'line': 5, 'column': 7 }, 'end': { 'line': 5, 'column': 8 } } }, 'right': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 52, 53 ], 'loc': { 'start': { 'line': 5, 'column': 9 }, 'end': { 'line': 5, 'column': 10 } } }, 'range': [ 50, 53 ], 'loc': { 'start': { 'line': 5, 'column': 7 }, 'end': { 'line': 5, 'column': 10 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 64, 65 ], 'loc': { 'start': { 'line': 6, 'column': 8 }, 'end': { 'line': 6, 'column': 9 } } }, 'right': { 'type': 'Identifier', 'name': 'x', 'range': [ 66, 67 ], 'loc': { 'start': { 'line': 6, 'column': 10 }, 'end': { 'line': 6, 'column': 11 } } }, 'range': [ 64, 67 ], 'loc': { 'start': { 'line': 6, 'column': 8 }, 'end': { 'line': 6, 'column': 11 } } }, 'range': [ 64, 68 ], 'loc': { 'start': { 'line': 6, 'column': 8 }, 'end': { 'line': 6, 'column': 12 } } } ], 'range': [ 54, 69 ], 'loc': { 'start': { 'line': 5, 'column': 11 }, 'end': { 'line': 6, 'column': 13 } } }, 'alternate': { 'type': 'IfStatement', 'test': { 'type': 'BinaryExpression', 'operator': '<', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 83, 84 ], 'loc': { 'start': { 'line': 7, 'column': 13 }, 'end': { 'line': 7, 'column': 14 } } }, 'right': { 'type': 'Literal', 'value': 0, 'raw': '0', 'range': [ 85, 86 ], 'loc': { 'start': { 'line': 7, 'column': 15 }, 'end': { 'line': 7, 'column': 16 } } }, 'range': [ 83, 86 ], 'loc': { 'start': { 'line': 7, 'column': 13 }, 'end': { 'line': 7, 'column': 16 } } }, 'consequent': { 'type': 'BlockStatement', 'body': [ { 'type': 'ExpressionStatement', 'expression': { 'type': 'AssignmentExpression', 'operator': '=', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 97, 98 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 9 } } }, 'right': { 'type': 'BinaryExpression', 'operator': '+', 'left': { 'type': 'Identifier', 'name': 'x', 'range': [ 99, 100 ], 'loc': { 'start': { 'line': 8, 'column': 10 }, 'end': { 'line': 8, 'column': 11 } } }, 'right': { 'type': 'Literal', 'value': 1, 'raw': '1', 'range': [ 101, 102 ], 'loc': { 'start': { 'line': 8, 'column': 12 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 99, 102 ], 'loc': { 'start': { 'line': 8, 'column': 10 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 97, 102 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 13 } } }, 'range': [ 97, 103 ], 'loc': { 'start': { 'line': 8, 'column': 8 }, 'end': { 'line': 8, 'column': 14 } } } ], 'range': [ 87, 109 ], 'loc': { 'start': { 'line': 7, 'column': 17 }, 'end': { 'line': 9, 'column': 5 } } }, 'alternate': null, 'range': [ 79, 109 ], 'loc': { 'start': { 'line': 7, 'column': 9 }, 'end': { 'line': 9, 'column': 5 } } }, 'range': [ 47, 109 ], 'loc': { 'start': { 'line': 5, 'column': 4 }, 'end': { 'line': 9, 'column': 5 } } }, { 'type': 'ReturnStatement', 'argument': { 'type': 'Identifier', 'name': 'x', 'range': [ 121, 122 ], 'loc': { 'start': { 'line': 10, 'column': 11 }, 'end': { 'line': 10, 'column': 12 } } }, 'range': [ 114, 123 ], 'loc': { 'start': { 'line': 10, 'column': 4 }, 'end': { 'line': 10, 'column': 13 } } } ], 'range': [ 17, 125 ], 'loc': { 'start': { 'line': 1, 'column': 17 }, 'end': { 'line': 11, 'column': 1 } } }, 'generator': false, 'expression': false, 'async': false, 'range': [ 0, 125 ], 'loc': { 'start': { 'line': 1, 'column': 0 }, 'end': { 'line': 11, 'column': 1 } } }
            ,inputCode)),

        JSON.stringify([{line: 1,type: 'FunctionDeclaration', name: 'func3'},
            {line: 2,type: 'VariableDeclarator',name: 'x'}, {line: 3,type: 'AssignmentExpression',name: 'x',value: '0'}, {line: 5,type: 'IfStatement',condition: 'x<0'}, {line: 6,type: 'AssignmentExpression',name: 'x',value: 'x'}, {line: 7,type: 'Else If Statement',condition: 'x<0'}, {line: 8,type: 'AssignmentExpression',name: 'x',value: 'x+1'}, {line: 10,type: 'ReturnStatement',value: 'x'}
        ]));});});



describe('Parse Code Test', () => {

    it('Parse Code 1', () => {
        var inputCode='function func4 (){\n' +
            ' \n' +
            '}';
        assert.equal(
            JSON.stringify(parseCode(inputCode)),
            JSON.stringify([{line: 1,type: 'FunctionDeclaration', name: 'func4'}
            ])
        );
    });
});




